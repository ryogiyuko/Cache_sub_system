///////////////////////////////////////////////////////////////////////////////////
// ________________________________________________________________________________________________
// 
// 
//             Synchronous One-Port Register File Compiler
// 
//                 UMC 0.11um LL AE Logic Process
// 
// ________________________________________________________________________________________________
// 
//               
//         Copyright (C) 2024 Faraday Technology Corporation. All Rights Reserved.       
//                
//         This source code is an unpublished work belongs to Faraday Technology Corporation       
//         It is considered a trade secret and is not to be divulged or       
//         used by parties who have not received written authorization from       
//         Faraday Technology Corporation       
//                
//         Faraday's home page can be found at: http://www.faraday-tech.com/       
//                
// ________________________________________________________________________________________________
// 
//        IP Name            :  FSR0K_B_SY                
//        IP Version         :  1.4.0                     
//        IP Release Status  :  Active                    
//        Word               :  128                       
//        Bit                :  2                         
//        Byte               :  8                         
//        Mux                :  4                         
//        Output Loading     :  0.01                      
//        Clock Input Slew   :  0.016                     
//        Data Input Slew    :  0.016                     
//        Ring Type          :  Ringless Model            
//        Ring Width         :  0                         
//        Bus Format         :  0                         
//        Memaker Path       :  /home/mem/Desktop/memlib  
//        GUI Version        :  m20230904                 
//        Date               :  2024/09/10 14:30:36       
// ________________________________________________________________________________________________
// 
///////////////////////////////////////////////////////////////////////////////////

model SYKB110_128X2X8CM4 (
    A0, A1, A2, A3, A4, A5, A6,
    DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15,
    DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15,
    WEB0, WEB1, WEB2, WEB3, WEB4, WEB5, WEB6, WEB7,
    DVS0, DVS1, DVS2, DVS3, DVSE,
    CK, CSB) (

    input (WEB0, WEB1, WEB2, WEB3, WEB4, WEB5, WEB6, WEB7, CK, CSB) ()
    input (A0, A1, A2, A3, A4, A5, A6) ()
    input (DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15) ()
    input (DVS0, DVS1, DVS2, DVS3) ()
    input (DVSE) ()
    intern(WE0)(primitive = _inv (WEB0, WE0);)
    intern(WE0CS)(primitive = _and (WE0,CS,WE0CS);)
    intern(WE1)(primitive = _inv (WEB1, WE1);)
    intern(WE1CS)(primitive = _and (WE1,CS,WE1CS);)
    intern(WE2)(primitive = _inv (WEB2, WE2);)
    intern(WE2CS)(primitive = _and (WE2,CS,WE2CS);)
    intern(WE3)(primitive = _inv (WEB3, WE3);)
    intern(WE3CS)(primitive = _and (WE3,CS,WE3CS);)
    intern(WE4)(primitive = _inv (WEB4, WE4);)
    intern(WE4CS)(primitive = _and (WE4,CS,WE4CS);)
    intern(WE5)(primitive = _inv (WEB5, WE5);)
    intern(WE5CS)(primitive = _and (WE5,CS,WE5CS);)
    intern(WE6)(primitive = _inv (WEB6, WE6);)
    intern(WE6CS)(primitive = _and (WE6,CS,WE6CS);)
    intern(WE7)(primitive = _inv (WEB7, WE7);)
    intern(WE7CS)(primitive = _and (WE7,CS,WE7CS);)
    intern(WE)(primitive = _and (WE0, WE1, WE2, WE3, WE4, WE5, WE6, WE7, WE);)
    intern(WEB)(primitive = _inv (WE, WEB);)
    intern(CS)(primitive = _inv (CSB, CS);)
    intern(WEN)(primitive = _and (WE,CS,WEN);)
    intern(REN)(primitive = _and (WEB,CS,REN);)
    intern(OE) (primitive = _tie1 (OE);)


    output (DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15) (
        data_size = 2;
        address_size = 7;
        min_address = 0;
        max_address = 127;
        edge_trigger = WR;
        read_write_conflict = XX;
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE0CS, A0, A1, A2, A3, A4, A5, A6, DI0, DI1),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO0, DO1)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE1CS, A0, A1, A2, A3, A4, A5, A6, DI2, DI3),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO2, DO3)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE2CS, A0, A1, A2, A3, A4, A5, A6, DI4, DI5),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO4, DO5)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE3CS, A0, A1, A2, A3, A4, A5, A6, DI6, DI7),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO6, DO7)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE4CS, A0, A1, A2, A3, A4, A5, A6, DI8, DI9),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO8, DO9)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE5CS, A0, A1, A2, A3, A4, A5, A6, DI10, DI11),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO10, DO11)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE6CS, A0, A1, A2, A3, A4, A5, A6, DI12, DI13),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO12, DO13)
        );
        primitive = _cram(, ,
            _write{H,H,H} (CK, WE7CS, A0, A1, A2, A3, A4, A5, A6, DI14, DI15),
            _read{1,H,H,H} (OE, CK, REN, A0, A1, A2, A3, A4, A5, A6, DO14, DO15)
        );
    )
)

///////////////////////////////////////////////////////////////////////////////////
// ________________________________________________________________________________________________
// 
// 
//             Synchronous One-Port Register File Compiler
// 
//                 UMC 0.11um LL AE Logic Process
// 
// ________________________________________________________________________________________________
// 
//               
//         Copyright (C) 2024 Faraday Technology Corporation. All Rights Reserved.       
//                
//         This source code is an unpublished work belongs to Faraday Technology Corporation       
//         It is considered a trade secret and is not to be divulged or       
//         used by parties who have not received written authorization from       
//         Faraday Technology Corporation       
//                
//         Faraday's home page can be found at: http://www.faraday-tech.com/       
//                
// ________________________________________________________________________________________________
// 
//        IP Name            :  FSR0K_B_SY                
//        IP Version         :  1.4.0                     
//        IP Release Status  :  Active                    
//        Word               :  128                       
//        Bit                :  2                         
//        Byte               :  8                         
//        Mux                :  4                         
//        Output Loading     :  0.01                      
//        Clock Input Slew   :  0.016                     
//        Data Input Slew    :  0.016                     
//        Ring Type          :  Ringless Model            
//        Ring Width         :  0                         
//        Bus Format         :  0                         
//        Memaker Path       :  /home/mem/Desktop/memlib  
//        GUI Version        :  m20230904                 
//        Date               :  2024/09/10 14:30:36       
// ________________________________________________________________________________________________
// 
///////////////////////////////////////////////////////////////////////////////////

module SYKB110_128X2X8CM4 ( 
                     A6,A5,A4,A3,A2,A1,A0, 
                     DO0, DO1, DO2, DO3, DO4, DO5, DO6, DO7, DO8, DO9, DO10, DO11, DO12, DO13, DO14, DO15,
                     DI0, DI1, DI2, DI3, DI4, DI5, DI6, DI7, DI8, DI9, DI10, DI11, DI12, DI13, DI14, DI15,
                     DVS0, DVS1, DVS2, DVS3, DVSE,
                     WEB7,WEB6,WEB5,WEB4,WEB3,WEB2,WEB1,WEB0,CK,CSB);
                           
   parameter  AddressSize     = 7;
   parameter  Bits            = 2;
   parameter  Words           = 128;
   parameter  Bytes           = 8;
   parameter  AddressRepSize  = 4;
   parameter  DVSize          = 4; 
 
   input  CK, CSB;
   input  WEB7,WEB6,WEB5,WEB4,WEB3,WEB2,WEB1,WEB0;
   input  A6,A5,A4,A3,A2,A1,A0;
   input  DVS0,DVS1,DVS2,DVS3,DVSE;
   input  DI0,DI1,DI2,DI3,DI4,DI5,DI6,DI7,DI8,DI9,DI10,DI11,DI12,DI13,DI14,DI15; 
   output DO0,DO1,DO2,DO3,DO4,DO5,DO6,DO7,DO8,DO9,DO10,DO11,DO12,DO13,DO14,DO15;

   reg [Bits-1:0] mem_0 [0:Words-1] ; 
   reg [Bits-1:0] mem_1 [0:Words-1] ; 
   reg [Bits-1:0] mem_2 [0:Words-1] ; 
   reg [Bits-1:0] mem_3 [0:Words-1] ; 
   reg [Bits-1:0] mem_4 [0:Words-1] ; 
   reg [Bits-1:0] mem_5 [0:Words-1] ; 
   reg [Bits-1:0] mem_6 [0:Words-1] ; 
   reg [Bits-1:0] mem_7 [0:Words-1] ; 
   reg [Bits-1:0] DO_0 ;   
   reg [Bits-1:0] DO_1 ;   
   reg [Bits-1:0] DO_2 ;   
   reg [Bits-1:0] DO_3 ;   
   reg [Bits-1:0] DO_4 ;   
   reg [Bits-1:0] DO_5 ;   
   reg [Bits-1:0] DO_6 ;   
   reg [Bits-1:0] DO_7 ;   
  
   wire [AddressSize-1:0] A = { A6,A5,A4,A3,A2,A1,A0 }; 
   wire [Bits-1:0] DI_0 = { DI1,DI0 };         
   wire [Bits-1:0] DI_1 = { DI3,DI2 };         
   wire [Bits-1:0] DI_2 = { DI5,DI4 };         
   wire [Bits-1:0] DI_3 = { DI7,DI6 };         
   wire [Bits-1:0] DI_4 = { DI9,DI8 };         
   wire [Bits-1:0] DI_5 = { DI11,DI10 };         
   wire [Bits-1:0] DI_6 = { DI13,DI12 };         
   wire [Bits-1:0] DI_7 = { DI15,DI14 };         
   wire [Bytes-1:0] WEB = { WEB7,WEB6,WEB5,WEB4,WEB3,WEB2,WEB1,WEB0 }; 
   wire [Bytes*Bits-1:0] DO = { DO_7,DO_6,DO_5,DO_4,DO_3,DO_2,DO_1,DO_0 };     
   wire DO15 = DO[15] ;     
   wire DO14 = DO[14] ;     
   wire DO13 = DO[13] ;     
   wire DO12 = DO[12] ;     
   wire DO11 = DO[11] ;     
   wire DO10 = DO[10] ;     
   wire DO9 = DO[9] ;     
   wire DO8 = DO[8] ;     
   wire DO7 = DO[7] ;     
   wire DO6 = DO[6] ;     
   wire DO5 = DO[5] ;     
   wire DO4 = DO[4] ;     
   wire DO3 = DO[3] ;     
   wire DO2 = DO[2] ;     
   wire DO1 = DO[1] ;     
   wire DO0 = DO[0] ;     

   wire write_en0;
   wire write_en1;
   wire write_en2;
   wire write_en3;
   wire write_en4;
   wire write_en5;
   wire write_en6;
   wire write_en7;

   and u10 (write_en0, !WEB[0], !CSB); 
   and u11 (write_en1, !WEB[1], !CSB); 
   and u12 (write_en2, !WEB[2], !CSB); 
   and u13 (write_en3, !WEB[3], !CSB); 
   and u14 (write_en4, !WEB[4], !CSB); 
   and u15 (write_en5, !WEB[5], !CSB); 
   and u16 (write_en6, !WEB[6], !CSB); 
   and u17 (write_en7, !WEB[7], !CSB); 

   always @ (posedge CK) 
      if (write_en0) mem_0[A] = DI_0;      
   always @ (posedge CK) 
      if (write_en1) mem_1[A] = DI_1;      
   always @ (posedge CK) 
      if (write_en2) mem_2[A] = DI_2;      
   always @ (posedge CK) 
      if (write_en3) mem_3[A] = DI_3;      
   always @ (posedge CK) 
      if (write_en4) mem_4[A] = DI_4;      
   always @ (posedge CK) 
      if (write_en5) mem_5[A] = DI_5;      
   always @ (posedge CK) 
      if (write_en6) mem_6[A] = DI_6;      
   always @ (posedge CK) 
      if (write_en7) mem_7[A] = DI_7;      

   always @ (posedge CK)
      if (!CSB) DO_0 = mem_0[A];      
   always @ (posedge CK)
      if (!CSB) DO_1 = mem_1[A];      
   always @ (posedge CK)
      if (!CSB) DO_2 = mem_2[A];      
   always @ (posedge CK)
      if (!CSB) DO_3 = mem_3[A];      
   always @ (posedge CK)
      if (!CSB) DO_4 = mem_4[A];      
   always @ (posedge CK)
      if (!CSB) DO_5 = mem_5[A];      
   always @ (posedge CK)
      if (!CSB) DO_6 = mem_6[A];      
   always @ (posedge CK)
      if (!CSB) DO_7 = mem_7[A];      

                             
endmodule

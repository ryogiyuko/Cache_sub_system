///////////////////////////////////////////////////////////////////////////////////
// ________________________________________________________________________________________________
// 
// 
//             Synchronous High-Density Single-Port SRAM Compiler
// 
//                 UMC 0.11um LL AE Logic Process
// 
// ________________________________________________________________________________________________
// 
//               
//         Copyright (C) 2024 Faraday Technology Corporation. All Rights Reserved.       
//                
//         This source code is an unpublished work belongs to Faraday Technology Corporation       
//         It is considered a trade secret and is not to be divulged or       
//         used by parties who have not received written authorization from       
//         Faraday Technology Corporation       
//                
//         Faraday's home page can be found at: http://www.faraday-tech.com/       
//                
// ________________________________________________________________________________________________
// 
//        IP Name            :  FSR0K_D_SH                
//        IP Version         :  1.3.0                     
//        IP Release Status  :  Active                    
//        Word               :  2048                      
//        Bit                :  16                        
//        Byte               :  8                         
//        Mux                :  1                         
//        Output Loading     :  0.01                      
//        Clock Input Slew   :  0.016                     
//        Data Input Slew    :  0.016                     
//        Ring Type          :  Ring Shape Model          
//        Ring Width         :  2                         
//        Bus Format         :  0                         
//        Memaker Path       :  /home/mem/Desktop/memlib  
//        GUI Version        :  m20230904                 
//        Date               :  2024/10/31 20:16:02       
// ________________________________________________________________________________________________
// 
///////////////////////////////////////////////////////////////////////////////////

MemoryTemplate (SHKD110_2048X16X8BM1) {

// Suggested Algorithms : SMarchCHKB and LVMarchCMinus;
    Algorithm               : SMarchCHKB;
    BitGrouping             : 1;    
    CellName                : SHKD110_2048X16X8BM1;
    LogicalPorts            : 1RW;
    MemoryType              : SRAM;
    MinHold                 : 1;
    NumberOfBits            : 128;
    NumberOfWords           : 2048;
    OperationSet            : Sync;
    TransparentMode         : SyncMux; 
    MilliWattsPerMegaHertz  : 0.2361;

    Port (A%d[10:0]) {
          Function      : address;
          Direction     : input;
          LogicalPort   : A;
    }

    Port (CK) {
          Function      : clock;
          Direction     : input;
          LogicalPort   : A;
    }
    
    Port (CS) {
          Function      : select;
          Direction     : input;
          Polarity      : ActiveHigh;
          LogicalPort   : A;
    }

    Port (DI%d[127:0]) {
          Function      : data;
          Direction     : input;
          LogicalPort   : A;
    }    

    Port (DO%d[127:0]) {
          Function      : data;
          Direction     : output;
          LogicalPort   : A;
    }

    Port (OE) {
          Function      : OutputEnable;
          Direction     : input;
          LogicalPort   : A;
    }


    Port (WEB7) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI127, DI126, DI125, DI124, DI123, DI122, DI121, DI120, DI119, DI118, DI117, DI116, DI115, DI114, DI113, DI112 ;
    }
    Port (WEB6) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI111, DI110, DI109, DI108, DI107, DI106, DI105, DI104, DI103, DI102, DI101, DI100, DI99, DI98, DI97, DI96 ;
    }
    Port (WEB5) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI95, DI94, DI93, DI92, DI91, DI90, DI89, DI88, DI87, DI86, DI85, DI84, DI83, DI82, DI81, DI80 ;
    }
    Port (WEB4) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI79, DI78, DI77, DI76, DI75, DI74, DI73, DI72, DI71, DI70, DI69, DI68, DI67, DI66, DI65, DI64 ;
    }
    Port (WEB3) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI63, DI62, DI61, DI60, DI59, DI58, DI57, DI56, DI55, DI54, DI53, DI52, DI51, DI50, DI49, DI48 ;
    }
    Port (WEB2) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI47, DI46, DI45, DI44, DI43, DI42, DI41, DI40, DI39, DI38, DI37, DI36, DI35, DI34, DI33, DI32 ;
    }
    Port (WEB1) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI31, DI30, DI29, DI28, DI27, DI26, DI25, DI24, DI23, DI22, DI21, DI20, DI19, DI18, DI17, DI16 ;
    }
    Port (WEB0) {
          Function      : WriteEnable;
          Direction     : input;
          Polarity      : ActiveLow;
          LogicalPort   : A;	  
	  BitsPerWriteEnable : 16;  
	  WriteEnableMap : DI15, DI14, DI13, DI12, DI11, DI10, DI9, DI8, DI7, DI6, DI5, DI4, DI3, DI2, DI1, DI0 ;
    }



    AddressCounter {
       Function (Address) {
          LogicalAddressMap {
             ColumnAddress[3:0] : Address[3:0];
             RowAddress[6:0] : Address[10:4];
          }
       }
       Function (ColumnAddress) {
          CountRange [0:15];
       }
       Function (RowAddress) {
          CountRange [0:127];
       }
    }

    PhysicalAddressMap {
                ColumnAddress[0] : c[0];
                ColumnAddress[1] : c[1];
                ColumnAddress[2] : c[2];
                ColumnAddress[3] : c[3];
                RowAddress[0] : r[0];
                RowAddress[1] : r[1];
                RowAddress[2] : r[2];
                RowAddress[3] : r[3];
                RowAddress[4] : r[4];
                RowAddress[5] : r[5];
                RowAddress[6] : r[6];
    }

}
